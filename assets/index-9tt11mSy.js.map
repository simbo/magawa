{"version":3,"mappings":"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","names":["AppRoute","GameDifficulty","GameDifficulty2","DEFAULT_GAME_DIFFICULTY","gameDifficultySettings","GameStatus","GameStatus2","GameFinalStatus","GameFinalStatus2","STORAGE_DATA_VERSION","STORAGE_KEY_PREFIX","Storage","data","fallback","decompressFromUTF16","compressToUTF16","version","storage","GameAction","gameActions","player","difficulty","settings","state","difficultySettings","tilesX","tilesY","minesCount","pauseDuration","differenceInMilliseconds","startedAt","subMilliseconds","finalStatus","flagsCount","gameSelectors","status","tileSize","gameEffects","_action","_state","dispatch","initialState","gameStore","Store","gameStoreContext","createContext","GameView","lazy","__vitePreload","module","HighscoresView","AboutView","MenuView","App","Component","Subject","takeUntil","gameState","_props","h","Suspense","Router","createHashHistory","error","SVG_ICON_CACHE","ICON_NAME_ATTRIBUTE","SvgIcon","attribute","_oldValue","value","iconName","svg","importedIcon","__variableDynamicImportRuntimeHelper","render"],"sources":["../../src/scripts/lib/app-route.enum.ts","../../src/scripts/lib/game-difficulty.ts","../../src/scripts/lib/game-status.ts","../../src/scripts/lib/storage.ts","../../src/scripts/store/game/game-actions.ts","../../src/scripts/store/game/game-selectors.ts","../../src/scripts/store/game/game-effects.ts","../../src/scripts/store/game/game-store.ts","../../src/scripts/components/app.tsx","../../src/scripts/custom-elements/svg-icon/svg-icon.ts","../../src/scripts/main.tsx"],"sourcesContent":["export enum AppRoute {\n  Home = '/',\n  Game = '/game',\n  Highscores = '/highscores',\n  About = '/about'\n}\n","export enum GameDifficulty {\n  Easy,\n  Medium,\n  Hard,\n  Custom\n}\nexport interface GameDifficultySettings {\n  tilesX: number;\n  tilesY: number;\n  minesCount: number;\n}\n\nexport const DEFAULT_GAME_DIFFICULTY = GameDifficulty.Medium;\n\nexport type GameDifficultySettingsMap = {\n  [key in GameDifficulty]: GameDifficultySettings;\n};\n\nexport const gameDifficultySettings: GameDifficultySettingsMap = {\n  [GameDifficulty.Easy]: {\n    tilesX: 8,\n    tilesY: 8,\n    minesCount: 10\n  },\n  [GameDifficulty.Medium]: {\n    tilesX: 16,\n    tilesY: 16,\n    minesCount: 40\n  },\n  [GameDifficulty.Hard]: {\n    tilesX: 30,\n    tilesY: 16,\n    minesCount: 99\n  },\n  [GameDifficulty.Custom]: {\n    tilesX: 30,\n    tilesY: 24,\n    minesCount: 668\n  }\n};\n","export enum GameStatus {\n  Closed,\n  Running,\n  Paused,\n  Finished\n}\n\nexport enum GameFinalStatus {\n  Lost,\n  Won\n}\n","import { compressToUTF16, decompressFromUTF16 } from 'lz-string';\n\nimport { GameDifficulty, GameDifficultySettings } from './game-difficulty';\n\nenum StorageKey {\n  DataVersion = 'dataVersion',\n  Data = 'data'\n}\n\nconst STORAGE_DATA_VERSION = 1;\nconst STORAGE_KEY_PREFIX = 'magawa';\n\ninterface StorageData {\n  player: string | null;\n  difficulty: GameDifficulty;\n  difficultySettings: GameDifficultySettings;\n}\n\nclass Storage {\n  private data!: StorageData;\n  private readonly dataKey = `${STORAGE_KEY_PREFIX}_${StorageKey.Data}`;\n  private readonly versionKey = `${STORAGE_KEY_PREFIX}_${StorageKey.DataVersion}`;\n\n  constructor() {\n    this.verifyDataVersion();\n    this.read();\n  }\n\n  public set(data: Partial<StorageData>): void {\n    this.data = { ...this.data, ...data };\n    this.write();\n  }\n\n  public get(fallback: StorageData): StorageData {\n    return { ...fallback, ...this.data };\n  }\n\n  private read(): void {\n    let data: StorageData;\n    try {\n      data = JSON.parse(decompressFromUTF16(window.localStorage.getItem(this.dataKey) || ''));\n    } catch {\n      data = { ...this.data };\n    }\n    this.data = data;\n  }\n\n  private write(): void {\n    window.localStorage.setItem(this.dataKey, compressToUTF16(JSON.stringify(this.data || {})));\n    window.localStorage.setItem(this.versionKey, JSON.stringify(`${STORAGE_DATA_VERSION}`));\n  }\n\n  private verifyDataVersion(): void {\n    let version: number;\n    try {\n      version = Number.parseInt(\n        JSON.parse(window.localStorage.getItem(this.versionKey) || `${STORAGE_DATA_VERSION}`),\n        10\n      );\n    } catch {\n      version = STORAGE_DATA_VERSION;\n    }\n    if (version !== STORAGE_DATA_VERSION) {\n      window.localStorage.removeItem(this.dataKey);\n      window.localStorage.removeItem(this.versionKey);\n    }\n  }\n}\n\nexport const storage = new Storage();\n","import { differenceInMilliseconds, subMilliseconds } from 'date-fns';\nimport { Actions } from 'small-store';\n\nimport { GameDifficulty, gameDifficultySettings, GameDifficultySettings } from '../../lib/game-difficulty';\nimport { GameFinalStatus, GameStatus } from '../../lib/game-status';\nimport { storage } from '../../lib/storage';\n\nimport { GameState } from './game-state.interface';\n\nexport enum GameAction {\n  SetSettings = 'setSettings',\n  Start = 'start',\n  FirstClick = 'firstClick',\n  Restart = 'restart',\n  Pause = 'pause',\n  Unpause = 'unpause',\n  TogglePause = 'togglePause',\n  Finish = 'finish',\n  Close = 'close',\n  SetFlagsCount = 'setFlagsCount'\n}\n\nexport interface GameActionPayloads {\n  [GameAction.SetSettings]: {\n    player: string;\n    difficulty: GameDifficulty;\n    settings: GameDifficultySettings;\n  };\n  [GameAction.Finish]: {\n    finalStatus: GameFinalStatus;\n  };\n  [GameAction.SetFlagsCount]: {\n    flagsCount: number;\n  };\n}\n\nexport const gameActions: Actions<GameState, GameAction, GameActionPayloads> = {\n  [GameAction.SetSettings]:\n    ({ player, difficulty, settings }) =>\n    state => {\n      if (!/^\\w+$/.test(player)) {\n        return state;\n      }\n      difficulty = difficulty >= 0 && difficulty <= GameDifficulty.Custom ? difficulty : state.difficulty;\n      const difficultySettings =\n        difficulty === GameDifficulty.Custom\n          ? settings || {\n              tilesX: state.tilesX,\n              tilesY: state.tilesY,\n              minesCount: state.minesCount\n            }\n          : gameDifficultySettings[difficulty];\n      const { tilesX, tilesY, minesCount } = difficultySettings;\n      storage.set({ player, difficulty, difficultySettings });\n      return { ...state, player, difficulty, tilesX, tilesY, minesCount };\n    },\n\n  [GameAction.Start]: () => {\n    return {\n      status: GameStatus.Running,\n      finalStatus: null,\n      startedAt: null,\n      pausedAt: null,\n      finishedAt: null,\n      flagsCount: 0\n    };\n  },\n\n  [GameAction.FirstClick]: () => {\n    return {\n      startedAt: new Date(),\n      pausedAt: null,\n      finishedAt: null,\n      flagsCount: 0\n    };\n  },\n\n  [GameAction.Pause]: () => state => {\n    if (state.status !== GameStatus.Running) {\n      return state;\n    }\n    return {\n      ...state,\n      status: GameStatus.Paused,\n      pausedAt: new Date()\n    };\n  },\n\n  [GameAction.Unpause]: () => state => {\n    if (state.status !== GameStatus.Paused) {\n      return state;\n    }\n    const pauseDuration = differenceInMilliseconds(state.pausedAt as Date, new Date());\n    const startedAt = state.startedAt ? subMilliseconds(state.startedAt as Date, pauseDuration) : null;\n    return {\n      ...state,\n      status: GameStatus.Running,\n      startedAt,\n      pausedAt: null\n    };\n  },\n\n  [GameAction.Finish]:\n    ({ finalStatus }) =>\n    state => {\n      if (state.status !== GameStatus.Running) {\n        return state;\n      }\n      return {\n        ...state,\n        finishedAt: new Date(),\n        status: GameStatus.Finished,\n        finalStatus\n      };\n    },\n\n  [GameAction.Close]: () => {\n    return {\n      status: GameStatus.Closed,\n      startedAt: null,\n      pausedAt: null\n    };\n  },\n\n  [GameAction.SetFlagsCount]:\n    ({ flagsCount }) =>\n    state => {\n      if (state.status !== GameStatus.Running || typeof flagsCount !== 'number') {\n        return state;\n      }\n      return { ...state, flagsCount };\n    }\n};\n","import { Selectors } from 'small-store';\n\nimport { GameFinalStatus, GameStatus } from '../../lib/game-status';\n\nimport { GameState } from './game-state.interface';\n\nexport const gameSelectors: Selectors<GameState> = {\n  player: ({ player }): string | null => {\n    return player;\n  },\n\n  isRunning: ({ status }): boolean => {\n    return status === GameStatus.Running;\n  },\n\n  isPaused: ({ status }): boolean => {\n    return status === GameStatus.Paused;\n  },\n\n  isFinished: ({ status }): boolean => {\n    return status === GameStatus.Finished;\n  },\n\n  isClosed: ({ status }): boolean => {\n    return status === GameStatus.Closed;\n  },\n\n  isWon: ({ finalStatus }): boolean => {\n    return finalStatus === GameFinalStatus.Won;\n  },\n\n  width: ({ tileSize, tilesX }): number => {\n    return tileSize * tilesX;\n  }\n};\n","import { Effects } from 'small-store';\n\nimport { GameAction, GameActionPayloads } from './game-actions';\nimport { gameSelectors } from './game-selectors';\nimport { GameState } from './game-state.interface';\n\nexport const gameEffects: Effects<GameState, GameAction, GameActionPayloads> = {\n  [GameAction.Restart]: (_action, _state, dispatch) => {\n    dispatch(GameAction.Start);\n  },\n\n  [GameAction.TogglePause]: (_action, state, dispatch) => {\n    if (gameSelectors.isPaused(state)) {\n      dispatch(GameAction.Unpause);\n    } else {\n      dispatch(GameAction.Pause);\n    }\n  }\n};\n","import { createContext } from 'preact';\nimport { Store } from 'small-store';\n\nimport { DEFAULT_GAME_DIFFICULTY, gameDifficultySettings } from '../../lib/game-difficulty';\nimport { GameStatus } from '../../lib/game-status';\nimport { storage } from '../../lib/storage';\n\nimport { GameAction, GameActionPayloads, gameActions } from './game-actions';\nimport { gameEffects } from './game-effects';\nimport { GameState } from './game-state.interface';\n\nconst {\n  player,\n  difficulty,\n  difficultySettings: { tilesX, tilesY, minesCount }\n} = storage.get({\n  player: null,\n  difficulty: DEFAULT_GAME_DIFFICULTY,\n  difficultySettings: gameDifficultySettings[DEFAULT_GAME_DIFFICULTY]\n});\n\nconst initialState: GameState = {\n  player,\n  status: GameStatus.Closed,\n  finalStatus: null,\n  startedAt: null,\n  pausedAt: null,\n  finishedAt: null,\n  difficulty,\n  tileSize: 40,\n  tilesX,\n  tilesY,\n  minesCount,\n  flagsCount: 0\n};\n\nexport const gameStore = new Store<GameState, GameAction, GameActionPayloads>(initialState, gameActions, gameEffects);\n\nexport const gameStoreContext = createContext(initialState);\n","import { createHashHistory } from 'history';\nimport { Component, h, VNode } from 'preact';\nimport Router, { CustomHistory } from 'preact-router';\nimport { lazy, Suspense } from 'preact/compat';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { AppRoute } from '../lib/app-route.enum';\nimport { GameState } from '../store/game/game-state.interface';\nimport { gameStore, gameStoreContext } from '../store/game/game-store';\n\ninterface AppState {\n  gameState: GameState;\n}\n\nconst GameView = lazy(() => import('./game-view').then(module => module.GameView));\nconst HighscoresView = lazy(() => import('./highscores-view').then(module => module.HighscoresView));\nconst AboutView = lazy(() => import('./about-view').then(module => module.AboutView));\nconst MenuView = lazy(() => import('./menu-view').then(module => module.MenuView));\n\nexport class App extends Component<object, AppState> {\n  private readonly unsubscribeSubject = new Subject<void>();\n\n  constructor() {\n    super();\n    gameStore.state$.pipe(takeUntil(this.unsubscribeSubject)).subscribe(gameState => this.setState({ gameState }));\n  }\n\n  public componentWillUnmount(): void {\n    this.unsubscribeSubject.next();\n  }\n\n  public render(_props: object, { gameState }: AppState): VNode {\n    return (\n      <div class=\"c-app\">\n        <gameStoreContext.Provider value={gameState}>\n          <Suspense fallback={<div class=\"page-loading\"></div>}>\n            <Router history={createHashHistory() as unknown as CustomHistory}>\n              <GameView path={AppRoute.Game} />\n              <HighscoresView path={AppRoute.Highscores} />\n              <AboutView path={AppRoute.About} />\n              <MenuView path={AppRoute.Home} />\n            </Router>\n          </Suspense>\n        </gameStoreContext.Provider>\n      </div>\n    );\n  }\n\n  public componentDidMount(): void {\n    Promise.all([\n      import('./game-view'),\n      import('./highscores-view'),\n      import('./about-view'),\n      import('./menu-view')\n    ]).catch(error => console.error(error));\n  }\n}\n","const SVG_ICON_CACHE = new Map<string, string>();\n\nexport const ICON_NAME_ATTRIBUTE = 'icon-name';\n\nexport class SvgIcon extends HTMLElement {\n  public static observedAttributes = [ICON_NAME_ATTRIBUTE];\n\n  public constructor() {\n    super();\n  }\n\n  public attributeChangedCallback(attribute: string, _oldValue: string, value: string): void {\n    if (attribute === ICON_NAME_ATTRIBUTE) {\n      this.setIcon(value);\n    }\n  }\n\n  private setIcon(iconName: string) {\n    if (typeof iconName !== 'string' || iconName.length === 0) {\n      return;\n    }\n    this.getIcon(iconName).then(svg => {\n      this.innerHTML = svg;\n    });\n  }\n\n  private async getIcon(iconName: string): Promise<string> {\n    if (!SVG_ICON_CACHE.has(iconName)) {\n      const { default: importedIcon } = await import(`./svg-icons/${iconName}.ts`);\n      SVG_ICON_CACHE.set(iconName, importedIcon);\n    }\n    const icon = SVG_ICON_CACHE.get(iconName) as string;\n    return icon;\n  }\n}\n","import '../styles/main.scss';\n\nimport { h, render } from 'preact';\n\nimport { App } from './components/app';\nimport { SvgIcon } from './custom-elements/svg-icon/svg-icon';\n\ndocument.documentElement.classList.remove('page-loading');\n\ncustomElements.define('svg-icon', SvgIcon);\n\nrender(<App />, document.body);\n"],"file":"assets/index-9tt11mSy.js"}