{"version":3,"file":"highscores-table-ahQzHy1X.js","sources":["../../node_modules/nanoid/index.browser.js","../../src/scripts/lib/highscores-manager.ts","../../src/scripts/lib/format-difficulty.function.ts","../../src/scripts/lib/format-duration.function.ts","../../src/scripts/lib/format-date.function.ts","../../src/scripts/components/highscores-table.tsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { compareAsc } from 'date-fns';\nimport { compressToUTF16, decompressFromUTF16 } from 'lz-string';\nimport { nanoid } from 'nanoid';\nimport { from, Observable, of } from 'rxjs';\nimport { map, mergeMap, tap } from 'rxjs/operators';\n\nimport {\n  HighscoreGameDifficulty,\n  Highscores,\n  HighscoresCompressed,\n  HighscoresEntry,\n  HighscoresForDifficulty,\n  HighscoresList\n} from './highscores.interface';\n\nconst STORAGE_URI = `https://jsonstorage.net/api/items/${\n  process.env.NODE_ENV === 'production'\n    ? '92724162-5354-4099-9b3a-112dfa90706a'\n    : 'c76f2d14-1c79-4aa3-8cc8-c997e168babe'\n}`;\n\nclass HighscoresManager {\n  private readonly storageURI = STORAGE_URI;\n\n  private highscores!: Highscores;\n\n  public add(\n    time: number,\n    player: string,\n    difficulty: HighscoreGameDifficulty\n  ): Observable<{\n    entry: HighscoresEntry;\n    highscores: HighscoresForDifficulty;\n  }> {\n    let entry: HighscoresEntry = {\n      id: nanoid(),\n      date: new Date(),\n      time,\n      player,\n      difficulty\n    };\n    return this.request().pipe(\n      mergeMap(highscores => {\n        highscores[difficulty].push(entry);\n        highscores[difficulty] = this.sortList(highscores[difficulty]);\n        highscores[difficulty] = this.rankList(highscores[difficulty]);\n        entry = this.findId(highscores, entry.id, difficulty);\n        highscores.updated = new Date();\n        return this.send(highscores);\n      }),\n      map(highscores => ({\n        entry,\n        highscores: {\n          list: highscores[difficulty].slice(0, 10),\n          updated: highscores.updated\n        }\n      }))\n    );\n  }\n\n  public get(\n    difficulty: HighscoreGameDifficulty,\n    player?: string,\n    maxEntries = 10\n  ): Observable<HighscoresForDifficulty> {\n    return this.getHighscores().pipe(\n      map((allHighscores: Highscores) => {\n        const highscores: HighscoresForDifficulty = {\n          list: allHighscores[difficulty],\n          updated: allHighscores.updated\n        };\n        if (player && player.length > 0) {\n          player = player.toLowerCase();\n          highscores.list = highscores.list.filter(entry => entry.player.toLowerCase() === player);\n        }\n        if (typeof maxEntries === 'number' && maxEntries > 0) {\n          highscores.list = highscores.list.slice(0, maxEntries);\n        }\n        return highscores;\n      })\n    );\n  }\n\n  private getHighscores(): Observable<Highscores> {\n    return this.highscores ? of<Highscores>(this.highscores) : this.request();\n  }\n\n  private request(): Observable<Highscores> {\n    return from<Promise<HighscoresCompressed>>(fetch(this.storageURI).then(async response => response.json())).pipe(\n      map(compressed => this.decompress(compressed)),\n      tap(highscores => {\n        this.highscores = highscores;\n      })\n    );\n  }\n\n  private send(highscores: Highscores): Observable<Highscores> {\n    return from<Promise<Response>>(\n      fetch(this.storageURI, {\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        headers: { 'Content-Type': 'application/json;charset=utf-8' },\n        method: 'put',\n        body: JSON.stringify(this.compress(highscores))\n      })\n    ).pipe(\n      map(() => {\n        this.highscores = highscores;\n        return highscores;\n      })\n    );\n  }\n\n  private findId(highscores: Highscores, entryId: string, difficulty: HighscoreGameDifficulty): HighscoresEntry {\n    return highscores[difficulty].find(({ id }) => id === entryId) as HighscoresEntry;\n  }\n\n  private sortList(list: HighscoresList): HighscoresList {\n    return list.sort((a, b) => {\n      const timeCompare = compareAsc(a.time, b.time);\n      return timeCompare === 0 ? compareAsc(a.date, b.date) : timeCompare;\n    });\n  }\n\n  private rankList(list: HighscoresList): HighscoresList {\n    return list.map((entry, i) => ({ ...entry, rank: i + 1 }));\n  }\n\n  private compress(highscores: Highscores): HighscoresCompressed {\n    return [compressToUTF16(JSON.stringify(highscores))];\n  }\n\n  private decompress([compressed]: HighscoresCompressed): Highscores {\n    return Object.entries(JSON.parse(decompressFromUTF16(compressed) as string)).reduce(\n      (highscores, [key, value]) => ({\n        ...highscores,\n        [key]:\n          key === 'updated'\n            ? new Date(value as string)\n            : (value as HighscoresList).map(entry => ({\n                ...entry,\n                date: new Date(entry.date)\n              }))\n      }),\n      {} as Highscores\n    );\n  }\n}\n\nexport const highscoresManager = new HighscoresManager();\n","import { GameDifficulty } from './game-difficulty';\n\nconst difficultiesMap: { [key in GameDifficulty]: string } = Object.entries(GameDifficulty).reduce(\n  (map, [key, value]) => ({ ...map, [value]: key }),\n  {} as unknown as { [key in GameDifficulty]: string }\n);\n\nexport function formatDifficulty(difficulty: GameDifficulty): string {\n  return difficultiesMap[difficulty];\n}\n","function addZeros(num: number, count = 2): string {\n  const str = `${num}`;\n  const i = Math.max(0, count - str.length);\n  return `${'0'.repeat(i)}${str}`;\n}\n\nexport function formatDuration(duration: number, withMilliseconds = true): string {\n  // const hours = Math.floor(duration / 3600000);\n  // duration -= hours * 3600000;\n  const minutes = Math.floor(duration / 60_000);\n  duration -= minutes * 60_000;\n  const seconds = Math.floor(duration / 1000);\n  return `${addZeros(minutes)}:${addZeros(seconds)}${\n    withMilliseconds ? `:${addZeros(duration - seconds * 1000, 3)}` : ''\n  }`;\n}\n","import { format } from 'date-fns';\n\nexport function formatDate(date: Date, withTime = true): string {\n  return format(date, `dd.MM.yyyy${withTime ? ' HH:mm:ss' : ''}`);\n}\n","import { Component, h, VNode } from 'preact';\n\nimport { formatDate } from '../lib/format-date.function';\nimport { formatDifficulty } from '../lib/format-difficulty.function';\nimport { formatDuration } from '../lib/format-duration.function';\nimport { HighscoresList } from '../lib/highscores.interface';\n\ninterface HighscoresTableProps {\n  list?: HighscoresList | null;\n  highlight?: string;\n}\n\nexport class HighscoresTable extends Component<HighscoresTableProps> {\n  public render({ list, highlight }: HighscoresTableProps): VNode {\n    return (\n      <table class=\"c-highscores-table\">\n        <thead>\n          <tr class=\"c-highscores-table__head-row\">\n            <th class=\"c-highscores-table__head-cell c-highscores-table__head-cell--rank\">#</th>\n            <th class=\"c-highscores-table__head-cell c-highscores-table__head-cell--name\">Name</th>\n            <th class=\"c-highscores-table__head-cell c-highscores-table__head-cell--difficulty\">Difficulty</th>\n            <th class=\"c-highscores-table__head-cell c-highscores-table__head-cell--time\">Time</th>\n          </tr>\n        </thead>\n        <tbody>\n          {(list || []).map(({ id, rank, player, difficulty, time, date }) => (\n            <tr\n              title={`${player} 🏆 ${formatDate(date)}`}\n              class={`c-highscores-table__row ${id === highlight ? 'c-highscores-table__row--highlight' : ''}`}\n            >\n              <td class=\"c-highscores-table__cell c-highscores-table__cell--rank\">{rank}</td>\n              <td class=\"c-highscores-table__cell c-highscores-table__cell--name\">{player}</td>\n              <td class=\"c-highscores-table__cell c-highscores-table__cell--difficulty\">\n                {formatDifficulty(difficulty)}\n              </td>\n              <td class=\"c-highscores-table__cell c-highscores-table__cell--time\">{formatDuration(time)}</td>\n            </tr>\n          ))}\n        </tbody>\n        {!list || list.length === 0 ? (\n          <tfoot>\n            <tr class=\"c-highscores-table__foot-row\">\n              {list === null ? (\n                <td colSpan={4} class=\"c-highscores-table__foot-cell c-highscores-table__foot-cell--error\">\n                  Error loading highscores.\n                </td>\n              ) : // eslint-disable-next-line unicorn/no-nested-ternary\n              list === undefined ? (\n                <td colSpan={4} class=\"c-highscores-table__foot-cell c-highscores-table__foot-cell--loading\">\n                  Loading...\n                </td>\n              ) : (\n                <td colSpan={4} class=\"c-highscores-table__foot-cell c-highscores-table__foot-cell--empty\">\n                  No entries found.\n                </td>\n              )}\n            </tr>\n          </tfoot>\n        ) : (\n          ''\n        )}\n      </table>\n    );\n  }\n}\n"],"names":["nanoid","size","id","byte","STORAGE_URI","HighscoresManager","time","player","difficulty","entry","mergeMap","highscores","map","maxEntries","allHighscores","of","from","response","compressed","tap","entryId","list","a","b","timeCompare","compareAsc","i","compressToUTF16","decompressFromUTF16","key","value","highscoresManager","difficultiesMap","GameDifficulty","formatDifficulty","addZeros","num","count","str","formatDuration","duration","withMilliseconds","minutes","seconds","formatDate","date","withTime","format","HighscoresTable","Component","highlight","h","rank"],"mappings":"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","x_google_ignoreList":[0]}