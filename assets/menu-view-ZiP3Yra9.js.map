{"version":3,"file":"menu-view-ZiP3Yra9.js","sources":["../../src/scripts/components/menu-form.tsx","../../src/scripts/components/menu-view.tsx"],"sourcesContent":["import { Component, createRef, h, JSX, VNode } from 'preact';\nimport { route } from 'preact-router';\nimport { take } from 'rxjs/operators';\n\nimport { AppRoute } from '../lib/app-route.enum';\nimport { GameDifficulty, gameDifficultySettings } from '../lib/game-difficulty';\nimport { GameAction } from '../store/game/game-actions';\nimport { gameStore } from '../store/game/game-store';\n\ninterface MenuFormState {\n  difficulty: GameDifficulty;\n  tilesX: number;\n  tilesY: number;\n  minesCount: number;\n  player: string | null;\n}\n\nexport class MenuForm extends Component<object, MenuFormState> {\n  private readonly difficulties = Object.entries(GameDifficulty).filter(([, value]) => typeof value === 'number') as [\n    string,\n    GameDifficulty\n  ][];\n\n  private readonly refPlayerInput = createRef<HTMLInputElement>();\n\n  private readonly minTilesX: number;\n  private readonly minTilesY: number;\n  private readonly minMinesCount: number;\n  private readonly maxTilesX: number;\n  private readonly maxTilesY: number;\n  private readonly maxMinesCount: number;\n\n  constructor(props: object, state: MenuFormState) {\n    super(props, state);\n    const settingsEasy = gameDifficultySettings[GameDifficulty.Easy];\n    this.minTilesX = settingsEasy.tilesX;\n    this.minTilesY = settingsEasy.tilesY;\n    this.minMinesCount = settingsEasy.minesCount;\n    const settingsCustom = gameDifficultySettings[GameDifficulty.Custom];\n    this.maxTilesX = settingsCustom.tilesX;\n    this.maxTilesY = settingsCustom.tilesY;\n    this.maxMinesCount = settingsCustom.minesCount;\n    gameStore.state$\n      .pipe(take(1))\n      .subscribe(({ difficulty, tilesX, tilesY, minesCount, player }) =>\n        this.setState({ difficulty, tilesX, tilesY, minesCount, player })\n      );\n  }\n\n  public componentDidMount(): void {\n    this.refPlayerInput.current?.focus();\n  }\n\n  public render(_props: object, { difficulty, tilesX, tilesY, minesCount, player }: MenuFormState): VNode {\n    const readonly = difficulty !== GameDifficulty.Custom;\n    return (\n      <form class=\"c-menu-form\" onSubmit={this.onSubmit}>\n        <div class=\"c-menu-form__row\">\n          <label htmlFor=\"player\" class=\"c-menu-form__label e-label\">\n            Your Name\n          </label>\n          <input\n            class=\"c-menu-form__input e-input\"\n            id=\"player\"\n            name=\"player\"\n            type=\"text\"\n            pattern=\"^\\w+$\"\n            required\n            value={player || ''}\n            ref={this.refPlayerInput}\n          />\n        </div>{' '}\n        <div class=\"c-menu-form__row\">\n          <label htmlFor=\"difficulty\" class=\"c-menu-form__label e-label\">\n            Difficulty\n          </label>\n          <select\n            class=\"c-menu-form__select e-select\"\n            id=\"difficulty\"\n            name=\"difficulty\"\n            onChange={this.onChangeDifficulty}\n          >\n            {this.difficulties.map(([key, value]) => (\n              <option value={value} selected={difficulty === value} class=\"c-menu-form__option e-option\">\n                {key}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div class=\"c-menu-form__row\">\n          <label htmlFor=\"tilesX\" class=\"c-menu-form__label e-label\">\n            Width\n          </label>\n          <input\n            class=\"c-menu-form__input e-input\"\n            id=\"tilesX\"\n            name=\"tilesX\"\n            type={readonly ? 'text' : 'number'}\n            min={this.minTilesX}\n            max={this.maxTilesX}\n            required\n            value={tilesX}\n            readOnly={readonly}\n          />\n        </div>\n        <div class=\"c-menu-form__row\">\n          <label htmlFor=\"tilesY\" class=\"c-menu-form__label e-label\">\n            Height\n          </label>\n          <input\n            class=\"c-menu-form__input e-input\"\n            id=\"tilesY\"\n            name=\"tilesY\"\n            type={readonly ? 'text' : 'number'}\n            min={this.minTilesY}\n            max={this.maxTilesY}\n            required\n            value={tilesY}\n            readOnly={readonly}\n          />\n        </div>\n        <div class=\"c-menu-form__row\">\n          <label htmlFor=\"minesCount\" class=\"c-menu-form__label e-label\">\n            Mines\n          </label>\n          <input\n            class=\"c-menu-form__input e-input\"\n            id=\"minesCount\"\n            name=\"minesCount\"\n            type={readonly ? 'text' : 'number'}\n            min={this.minMinesCount}\n            max={this.maxMinesCount}\n            required\n            value={minesCount}\n            readOnly={readonly}\n          />\n        </div>\n        <button class=\"c-menu-form__button e-button e-button--block e-button--primary\" type=\"submit\">\n          Start Game\n        </button>\n      </form>\n    );\n  }\n\n  private readonly onSubmit = (event: Event): void => {\n    event.preventDefault();\n    const form = event.currentTarget as HTMLFormElement;\n    if (form.checkValidity()) {\n      const data = new FormData(form);\n      gameStore.dispatch(GameAction.SetSettings, {\n        player: `${data.get('player')}`,\n        difficulty: Number.parseInt(`${data.get('difficulty')}`, 10),\n        settings: {\n          tilesX: Number.parseInt(`${data.get('tilesX')}`, 10),\n          tilesY: Number.parseInt(`${data.get('tilesY')}`, 10),\n          minesCount: Number.parseInt(`${data.get('minesCount')}`, 10)\n        }\n      });\n      route(AppRoute.Game);\n    }\n  };\n\n  private readonly onChangeDifficulty = (event: JSX.TargetedEvent<HTMLSelectElement, Event>): void => {\n    const difficulty: GameDifficulty = Number.parseInt(`${event.currentTarget.value}`, 10);\n    const player = this.refPlayerInput.current?.value;\n    if (difficulty === GameDifficulty.Custom) {\n      this.setState(state => ({ ...state, difficulty, player }));\n    } else {\n      const { tilesX, tilesY, minesCount } = gameDifficultySettings[difficulty];\n      this.setState({ difficulty, tilesX, tilesY, minesCount, player });\n    }\n  };\n}\n","import { Component, h, VNode } from 'preact';\nimport { Link } from 'preact-router';\n\nimport { AppRoute } from '../lib/app-route.enum';\nimport { IconName } from '../lib/icon-name.enum';\n\nimport { MenuForm } from './menu-form';\n\nexport class MenuView extends Component {\n  public render(): VNode {\n    return (\n      <div class=\"c-menu-view\">\n        <h1 className=\"c-menu-view__title e-title e-title--with-subtitle\">\n          Magawa <img class=\"e-icon\" src={`icons/${IconName.Magawa}.png`} />\n        </h1>\n        <p className=\"e-subtitle\">A Minesweeper Clone.</p>\n        <MenuForm />\n        <Link href={AppRoute.Highscores} class=\"c-menu-view__button e-button e-button--block\">\n          Highscores <img class=\"e-icon\" src={`icons/${IconName.Trophy}.png`} />\n        </Link>\n        <Link href={AppRoute.About} class=\"c-menu-view__button e-button e-button--block\">\n          About <img class=\"e-icon\" src={`icons/${IconName.Book}.png`} />\n        </Link>\n        <a\n          href=\"https://www.paypal.com/donate/?hosted_button_id=UHNHNPFVD32U8\"\n          target=\"_blank\"\n          class=\"c-menu-view__button e-button e-button--block\"\n        >\n          Donate <img class=\"e-icon\" src={`icons/${IconName.Money}.png`} />\n        </a>\n      </div>\n    );\n  }\n}\n"],"names":["MenuForm","Component","GameDifficulty","value","createRef","props","state","settingsEasy","gameDifficultySettings","settingsCustom","gameStore","take","difficulty","tilesX","tilesY","minesCount","player","_props","readonly","h","key","event","form","data","GameAction","route","AppRoute","MenuView","IconName","Link"],"mappings":"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"}